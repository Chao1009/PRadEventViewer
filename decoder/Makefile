#############################################################################
# Makefile for building: PRadEventViewer
# Generated by qmake (3.0) (Qt 5.6.0)
# Project:  QMakefile.pro
# Template: app
# Command: /usr/bin/qmake-qt5 -o Makefile QMakefile.pro
#############################################################################

MAKEFILE      = Makefile
PRAD_PATH     = ..
# enable multi-threading in the code
DEFINES       = -DMULTI_THREAD

####### Compiler, tools and options
CC            = gcc
CXX           = g++
FORTRAN       = gfortran
FFLAGS        = -fPIC
CXXFLAGS_LIBS = -shared -std=c++11 -O2 -g -pipe -Wall -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC $(DEFINES)
CXXFLAGS      = -std=c++11 -O2 -g -pipe -Wall -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC $(DEFINES)
INCPATH       = -I. -I$(PRAD_PATH)/include -I$(ROOTSYS)/include
DEL_FILE      = rm -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p
COPY          = cp -f
COPY_FILE     = cp -f
COPY_DIR      = cp -f -R
INSTALL_FILE  = install -m 644 -p
INSTALL_PROGRAM = install -m 755 -p
INSTALL_DIR   = cp -f -R
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
TAR           = tar -cf
COMPRESS      = gzip -9f
LINK          = g++
LFLAGS_LIBS   = -shared -Wl,-O1 -Wl,-z,relro
LFLAGS        = -Wl,-O1 -Wl,-z,relro
LIBS          = $(SUBLIBS) -L$(ROOTSYS)/lib -lCore -lRint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lGui -lSpectrum -lpthread -Llib -lexpat -lgfortran
AR            = ar cqs
RANLIB        = 
SED           = sed
STRIP         = 

####### Targets, add new objects here

# lib PRadDecoder
T_LIBS_DIR    = lib
TARGET_LIBS   = libPRadDecoder.so

LIB_SRC_DIR   = $(PRAD_PATH)/src

LIB_OBJ_DIR   = $(T_LIBS_DIR)/obj

LIB_OBJECTS   = $(LIB_OBJ_DIR)/PRadDAQUnit.o \
                $(LIB_OBJ_DIR)/PRadTDCGroup.o \
				$(LIB_OBJ_DIR)/PRadDAQChannel.o \
				$(LIB_OBJ_DIR)/PRadADCChannel.o \
				$(LIB_OBJ_DIR)/PRadTDCChannel.o \
				$(LIB_OBJ_DIR)/PRadCalibConst.o \
                $(LIB_OBJ_DIR)/PRadEvioParser.o \
                $(LIB_OBJ_DIR)/PRadDSTParser.o \
                $(LIB_OBJ_DIR)/PRadDataHandler.o \
                $(LIB_OBJ_DIR)/PRadException.o \
                $(LIB_OBJ_DIR)/PRadBenchMark.o \
                $(LIB_OBJ_DIR)/ConfigParser.o \
                $(LIB_OBJ_DIR)/ConfigValue.o \
                $(LIB_OBJ_DIR)/ConfigObject.o \
                $(LIB_OBJ_DIR)/PRadDetector.o \
                $(LIB_OBJ_DIR)/PRadHyCalSystem.o \
                $(LIB_OBJ_DIR)/PRadHyCalDetector.o \
                $(LIB_OBJ_DIR)/PRadHyCalModule.o \
                $(LIB_OBJ_DIR)/PRadHyCalCluster.o \
                $(LIB_OBJ_DIR)/PRadSquareCluster.o \
                $(LIB_OBJ_DIR)/island.o \
                $(LIB_OBJ_DIR)/PRadGEMSystem.o \
                $(LIB_OBJ_DIR)/PRadGEMDetector.o \
                $(LIB_OBJ_DIR)/PRadGEMPlane.o \
                $(LIB_OBJ_DIR)/PRadGEMFEC.o \
                $(LIB_OBJ_DIR)/PRadGEMAPV.o \
                $(LIB_OBJ_DIR)/PRadGEMCluster.o \
                $(LIB_OBJ_DIR)/PRadEventFilter.o \
                $(LIB_OBJ_DIR)/PRadCoordSystem.o \
                $(LIB_OBJ_DIR)/PRadDetMatch.o


# examples
TARGET       =  testLMS \
                testGEM \
                testHyCal \
                getAvgGain \
                replay
#                testEPICS
#                testIsland
#                testCombine
#                testMatch
#                testSim

EXE_LIBS      = -L$(T_LIBS_DIR) -lPRadDecoder

first: all

all: lib exe

lib: Makefile $(TARGET_LIBS)

exe: Makefile $(TARGET)



####### Build rules

$(TARGET_LIBS):  $(LIB_OBJECTS)
	$(LINK) $(LFLAGS_LIBS) -o $(T_LIBS_DIR)/$(TARGET_LIBS) $(LIB_OBJECTS) $(LIBS)

$(LIB_OBJ_DIR)/%.o: $(LIB_SRC_DIR)/%.cpp
	$(CXX) -c $(CXXFLAGS_LIBS) $(INCPATH) -o $@ $<

$(LIB_OBJ_DIR)/island.o: $(LIB_SRC_DIR)/island.F
	$(FORTRAN) -c $(FFLAGS) $(INCPATH) -o $@ $<

testIsland: src/testIsland.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

testEPICS: src/testEPICS.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

testLMS: src/testLMS.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

testGEM: src/testGEM.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

testHyCal: src/testHyCal.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

testSim: src/testSim.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

testCombine: src/testCombine.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

testMatch: src/testMatch.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

getAvgGain: src/getAvgGain.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)

replay: src/replay.cpp
	$(CXX) $(CXXFLAGS) -o $@ $< $(INCPATH) $(LIBS) $(EXE_LIBS)


####### Clean
clean: cleanobj cleanexe cleanlib

cleanobj:
	$(DEL_FILE) $(LIB_OBJ_DIR)/*.o $(EXE_OBJ_DIR)/*.o

cleanexe:
	$(DEL_FILE) $(TARGET)

cleanlib:
	$(DEL_FILE) $(T_LIBS_DIR)/$(TARGET_LIBS)

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

